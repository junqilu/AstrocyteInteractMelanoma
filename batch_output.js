// Functions to batch process images
// For all these functions, please follow the pattern of asking the user to select an input folder to generate an array of file directories, iterate through the array to open the image, process, output, and close the image. Doing this (rather than opening all the images at once and process them one by one) can avoid memory crowd up issues, which can lead to weird behaviours like the loop always stop at the half way

function histogram_data_generation_and_save(bins_num, input_stack_name) { //This should be equivalent to you click on the ratio heatmap, click Analyze -> Histogram -> List, and save the pop out result data table locally

    getHistogram(values, counts, bins_num); //Here a stack histogram with bins_num
    // values and counts are the things that you'll be using below to output the .csv

    //Table creation and saving
    Table.create("histogram_data");
    Table.setColumn("bin_start", values); //Column with histogram values. I use "bin_start" to be the same as if you use the GUI to output the data
    Table.setColumn("count", counts); //Column with histogram counts. I use "count" to be the same as if you use the GUI to output the data

    save_directory = judge_make_directory("Fiji_output\\Histogram_data");
    if (input_stack_name == "individual img") {
        heatmap_image = locate_image_by_regex("^Heatmap.*");
        stack_name = substring(heatmap_image, 11, lengthOf(heatmap_image)); //Remove the "Heatmap of " from beginning to get the stack_name
    } else {
        stack_name = input_stack_name;
    }

    FileName = "histogram_data_for_" + stack_name + ".csv";
    saveAs("Results", save_directory + "\\" + FileName);

    close(FileName); //Close the window for the histogram data
}

function histogram_image_generation_and_save(bins_num, input_stack_name) {
    run("Histogram", "bins=" + bins_num + " use x_min=0 x_max=1 y_max=Auto"); //Generate the histogram from the GUI
    // "x_min=0 x_max=1" because this is the ratio heatmap and all the ratios are between 0 and 1

    save_directory = judge_make_directory("Fiji_output\\Histogram_images");
    if (input_stack_name == "individual img") {
        heatmap_image = locate_image_by_regex("^Heatmap.*");
        stack_name = substring(heatmap_image, 11, lengthOf(heatmap_image)); //Remove the "Heatmap of " from beginning to get the stack_name
    } else {
        stack_name = input_stack_name;
    }

    FileName = "histogram_image_for_" + stack_name + ".tif";
    saveAs("Tiff", save_directory + "\\" + FileName);

    close(FileName); //Close the window for the histogram GUI
}
// Functions to batch output histogram data and histogram generated by ImageJ GUI
function output_histogram_data_and_img(input_file_directory) {
    open(input_file_directory);

    heatmap_image = get_stack_name();
    stack_name = substring(heatmap_image, 11, lengthOf(heatmap_image));

    bins_num = 256; // bins_num is default to be 256 (16 Ã— 16) and I like this number. It's basically the number of columns in your histogram
    histogram_data_generation_and_save(bins_num, stack_name);
    histogram_image_generation_and_save(bins_num, stack_name);

    close(heatmap_image + ".tif"); //Close the image
}

macro
"batch_output_histogram_data_and_img"
{
    input_folder_directory = pick_a_directory(); //Ask user to locate the folder that contains all the ratio heatmaps
    heatmap_files_array = filter_files(input_folder_directory, "^Heatmap.*.tif$");

    for (i = 0; i < lengthOf(heatmap_files_array); i++) {
        file_directory = heatmap_files_array[i];

        output_histogram_data_and_img(file_directory);
    }
}